'use strict';

var fs = require('fs'),
    config = require('meanio').loadConfig(),
    mkdirOrig = fs.mkdir,
    directory = config.root + '/files/public/',
    osSep = '/';
	

function rename(file, dest, user, callback) {
	// Read the file
	fs.readFile(file.path, function (err, data) {
		if (err) throw err;
		console.log('File read!');

		// Write the file
		fs.writeFile(directory + dest + file.name, data, function (err) {
			if (err) throw err;
			var identifyName = (user) ? user.name.replace(/\s+/g, '-').toLowerCase()+'-' : 'no-name-';
			var fileName = identifyName+ Date.now()+'.'+file.name.split('.').pop();
			var newFileName =  directory + dest + fileName;
			fs.rename(directory + dest + file.name, newFileName, function(err){
				if(err) throw err;
					callback({
					success: true,
					file: {
						src: '/files/public/' + dest + fileName,
						name: file.name,
						size: file.size,
						type: file.type,
						created: Date.now(),
						createor: (user) ? {
							id: user.id,
							name: user.name
						} : {}
					}
				});
			});
			
		});

		// Delete the file
		fs.unlink(file.path, function (err) {
			if (err) throw err;
			console.log('File deleted!');
		});
	});
}

function mkdir_p(path, callback, position) {
    var parts = require('path').normalize(path).split(osSep);

    position = position || 0;

    if (position >= parts.length) {
        return callback();
    }

    var directory = parts.slice(0, position + 1).join(osSep) || osSep;
    fs.stat(directory, function(err) {
        if (err === null) {
            mkdir_p(path, callback, position + 1);
        } else {
            mkdirOrig(directory, function(err) {
                if (err && err.code !== 'EEXIST') {
                    return callback(err);
                } else {
                    mkdir_p(path, callback, position + 1);
                }
            });
        }
    });
}

exports.upload = function(req, res) {
    var path = directory + req.body.dest;
    if (!fs.existsSync(path)) {
        mkdir_p(path, function(err) {
            rename(req.files.file, req.body.dest, req.user, function(data) {
                res.jsonp(data);
            });
        });
    } else {
        rename(req.files.file, req.body.dest, req.user, function(data) {
            res.jsonp(data);
        });
    }
};